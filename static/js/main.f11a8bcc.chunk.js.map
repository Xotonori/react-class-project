{"version":3,"sources":["components/TodoList/TodoListTasks/TodoListTask/TodoListTask.module.scss","components/TodoList/TodoListTasks/TodoListTasks.module.scss","components/TodoList/TodoListTitle/TodoListTitle.module.css","components/Preloader/Preloader.tsx","api/instance.ts","api/todoApi.ts","redux/todolistsReducer.ts","api/authApi.ts","redux/authReducer.ts","components/ErrorMessages/ErrorMessages.tsx","components/HeaderAuth/HeaderAuth.tsx","utils/validators/validators.ts","components/SignIn/authInput/authInput.tsx","components/SignIn/SignIn.tsx","components/AddNewItemForm/AddNewItemForm.tsx","components/DeleteItem/DeleteItem.tsx","components/TodoList/TodoListTasks/TodoListTask/TodoListTask.tsx","components/TodoList/TodoListTasks/TodoListTasks.tsx","components/TodoList/TodoListFooter/TodoListFooter.tsx","components/TodoList/TodoListTitle/TodoListTitle.tsx","components/TodoList/TodoList.tsx","components/TodoListContainer/TodolIstContainer.tsx","hoc/AuthenticationRoute/AuthenticationRoute.tsx","App.tsx","serviceWorker.js","redux/store.ts","index.tsx","components/DeleteItem/DeleteItem.module.scss","components/SignIn/SignIn.module.scss","components/TodoList/TodoListFooter/TodoListFooter.module.scss","components/HeaderAuth/HeaderAuth.module.scss","components/TodoList/TodoList.module.scss","components/TodoListContainer/TodolIstContainer.module.scss","components/ErrorMessages/ErrorMessages.module.scss","components/SignIn/authInput/authInput.module.scss","components/AddNewItemForm/AddNewItemForm.module.scss"],"names":["module","exports","Preloader","memo","Backdrop","open","style","zIndex","CircularProgress","color","instance","axios","create","baseURL","withCredentials","headers","todoApi","title","post","then","res","data","item","get","todolistId","delete","items","taskId","newTask","put","newTitle","initialState","todolists","isFetching","errorMessages","todoActions","todoLists","type","newTodoList","tasks","updatedTask","errorMessage","setTodoLists","dispatch","getState","a","length","response","message","authApi","signInData","email","login","userId","isAuth","initializedApp","authActions","payload","setAuthDataThunk","id","resultCode","messages","map","err","ErrorMessages","useDispatch","todoErrorMessages","useSelector","state","todolistsReducer","authReducer","authErrorMessages","commonErrors","filter","index","indexOf","onCloseAlertHandle","useCallback","useEffect","className","classes","alertWrapper","Alert","key","severity","onClose","closeText","AlertTitle","HeaderAuth","todolistsId","todo","AppBar","position","Toolbar","authToolbar","Button","authButton","onClick","console","log","to","schemaSignInForm","yup","shape","required","min","password","authInput","props","InputWrapper","Icon","icon","Input","SignIn","useForm","resolver","yupResolver","handleSubmit","errors","control","reset","onSubmit","rememberMe","captcha","signInThunk","Form","ControllerWrapper","as","defaultValue","name","placeholder","AccountCircle","error","ErrorMessage","Lock","AddNewItemForm","focus","onAddItemClick","trim","setState","addItem","onTitleChange","e","currentTarget","value","onKeyPress","onMouseUpHandler","todoListNewItemForm","TextField","onChange","this","label","onMouseUp","autoFocus","helperText","variant","onAddItemButton","Component","DeleteItem","buttonStyle","DeleteItemWrapper","DeleteItemWrapperBackspace","deleteItem","Backspace","Delete","React","TodoListTask","isEditMode","task","oldTitle","isTitleEmpty","deleteTask","updateTask","obj","changeTask","activatedEditMode","deActivatedEditMode","setChangeByEnter","onIsDoneChanged","status","checked","onTitleChanged","taskIsDoneClass","Task","Checkbox","onBlur","TodoListTasks","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","hiddenValue","Fade","in","timeout","filters","VisibilityOff","Visibility","TodoListTitle","updateTodolistTitle","objTitle","changeTodolistTitle","TodoList","addTask","deleteTodoList","deleteListItem","newFilterValue","restoreState","setTasks","filteredTasks","todoListHeader","TodoListTitleWrapper","connect","allTasks","TodolistContainer","addListItem","addTodolist","deleteTodolist","addListItemWrapper","AuthenticationRoute","exact","path","rest","render","App","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","includes","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f11a8bcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"TodoListTask_Task__1VUJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoListTasks\":\"TodoListTasks_TodoListTasks__9tZQn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodoListTitle_title__1VnBZ\"};","import React, {memo} from 'react'\r\nimport {Backdrop, CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const Preloader = memo(() => {\r\n    return (\r\n        <Backdrop open={true} style={{zIndex: 100}}>\r\n            <CircularProgress color=\"primary\"/>\r\n        </Backdrop>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"0ae27cf7-fe1b-4884-bd4b-0216c7edb73d\"}\r\n});","import {CommonResponseType, TaskType, TodoListType, UpdatedTodoTitleType} from \"../types/entities\";\r\nimport {instance} from './instance';\r\n\r\nexport const todoApi = {\r\n\r\n    createTodolist: (title: string) => {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n            .then(res => res.data.data.item)\r\n    },\r\n\r\n    getTodolists: () => {\r\n        return instance.get<GetTodolistsType>('todo-lists')\r\n            .then(res => res.data)\r\n    },\r\n\r\n    deleteListItem: (todolistId: string) => {\r\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n    getTasks: (todolistId: string) => {\r\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n            .then(res => res.data.items)\r\n    },\r\n\r\n    addTask: (title: string, todolistId: string) => {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(res => res.data.data.item)\r\n    },\r\n\r\n    deleteTask: (todolistId: string, taskId: string) => {\r\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n    updateTask: (todolistId: string, taskId: string, newTask: TaskType) => {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, {...newTask})\r\n            .then(res => res.data)\r\n    },\r\n\r\n    changeTodolistTitle: (todolistId: string, newTitle: UpdatedTodoTitleType) => {\r\n        return instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}`, {...newTitle})\r\n            .then(res => res.data)\r\n    },\r\n};\r\n\r\n//Types\r\ntype GetTodolistsType = Array<TodoListType>\r\ntype GetTasksType = {\r\n    error: string\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}","import {todoApi} from \"../api/todoApi\";\r\nimport {\r\n    TaskType,\r\n    TodoListType,\r\n    UpdatedTaskParamType,\r\n    UpdatedTodoTitleType\r\n} from \"../types/entities\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\n\r\nconst initialState = {\r\n    todolists: [] as Array<TodoListType>,\r\n    isFetching: false,\r\n    errorMessages: [] as Array<string>\r\n};\r\n\r\n//Reducer\r\nexport const todolistsReducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET_TODOLIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: action.todoLists.length !== 0 ? action.todoLists.map(tl => ({...tl, tasks: []})) : []\r\n            };\r\n\r\n        case 'SET_TASKS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: [...action.tasks]\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n\r\n        case 'ADD_TODOLIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            };\r\n\r\n        case 'DELETE_TODOLIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(todo => todo.id !== action.todolistId)\r\n            };\r\n\r\n        case 'ADD_TASK_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: [...todo.tasks, action.newTask]\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n\r\n        case 'DELETE_TASK_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter(task => task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n\r\n        case 'CHANGE_TASK_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map(task => {\r\n                                if (task.id !== action.taskId) {\r\n                                    return task\r\n                                } else {\r\n                                    return {...task, ...action.updatedTask}\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n\r\n        case 'CHANGE_TODOLIST_TITLE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            title: action.title\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n\r\n        case 'IS_FETCHING_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n\r\n        case 'IS_ERROR_MESSAGE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorMessages: state.errorMessages.includes(action.errorMessage) ?\r\n                    [...state.errorMessages] : [...state.errorMessages, action.errorMessage]\r\n            };\r\n\r\n        case 'FILTER_ERROR_MESSAGE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorMessages: state.errorMessages.filter(message => message !== action.errorMessage)\r\n            };\r\n\r\n        case 'DELETE_ERROR_MESSAGES_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorMessages: []\r\n            };\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\n//Actions\r\nexport const todoActions = {\r\n    setTodolistsSuccess: (todoLists: Array<TodoListType>) => ({type: 'SET_TODOLIST_SUCCESS', todoLists} as const),\r\n    addTodolistSuccess: (newTodoList: TodoListType) => ({type: 'ADD_TODOLIST_SUCCESS', newTodoList} as const),\r\n    changeTodolistTitleSuccess: (todolistId: string, title: string) => ({\r\n        type: 'CHANGE_TODOLIST_TITLE_SUCCESS',\r\n        todolistId,\r\n        title\r\n    } as const),\r\n    deleteTodolistSuccess: (todolistId: string) => ({type: 'DELETE_TODOLIST_SUCCESS', todolistId} as const),\r\n    setTasksSuccess: (tasks: Array<TaskType>, todolistId: string) => ({\r\n        type: 'SET_TASKS_SUCCESS', tasks, todolistId\r\n    } as const),\r\n    addTaskSuccess: (todolistId: string, newTask: TaskType) => ({\r\n        type: 'ADD_TASK_SUCCESS',\r\n        todolistId,\r\n        newTask\r\n    } as const),\r\n    changeTaskSuccess: (todolistId: string, taskId: string, updatedTask: TaskType) => ({\r\n        type: 'CHANGE_TASK_SUCCESS', todolistId, taskId, updatedTask\r\n    } as const),\r\n    deleteTaskSuccess: (todolistId: string, taskId: string) => ({\r\n        type: 'DELETE_TASK_SUCCESS', todolistId, taskId\r\n    } as const),\r\n    isFetchingSuccess: (isFetching: boolean) => ({type: 'IS_FETCHING_SUCCESS', isFetching} as const),\r\n    isErrorMessageSuccess: (errorMessage: string) => ({type: 'IS_ERROR_MESSAGE_SUCCESS', errorMessage} as const),\r\n    filterErrorMessagesSuccess: (errorMessage: string) => ({\r\n        type: 'FILTER_ERROR_MESSAGE_SUCCESS',\r\n        errorMessage\r\n    } as const),\r\n    deleteErrorMessagesSuccess: () => ({type: 'DELETE_ERROR_MESSAGES_SUCCESS'} as const)\r\n}\r\n\r\n//Thunks\r\nexport const setTodoLists = (): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        const todolists = await todoApi.getTodolists();\r\n        await dispatch(todoActions.setTodolistsSuccess(todolists));\r\n        todolists.length === 0 && dispatch(todoActions.isFetchingSuccess(false));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n};\r\n\r\nexport const addTodolist = (title: string): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        const newTodoList = await todoApi.createTodolist(title);\r\n        dispatch(todoActions.addTodolistSuccess(newTodoList));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const changeTodolistTitle = (todolistId: string, objTitle: UpdatedTodoTitleType): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        await todoApi.changeTodolistTitle(todolistId, {...objTitle})\r\n        dispatch(todoActions.changeTodolistTitleSuccess(todolistId, objTitle.title));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const deleteTodolist = (todolistId: string): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        await todoApi.deleteListItem(todolistId)\r\n        dispatch(todoActions.deleteTodolistSuccess(todolistId));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const setTasks = (todolistId: string): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    try {\r\n        const allTasks = await todoApi.getTasks(todolistId);\r\n        dispatch(todoActions.setTasksSuccess(allTasks, todolistId));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const addTask = (title: string, todolistId: string): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        const task = await todoApi.addTask(title, todolistId);\r\n        dispatch(todoActions.addTaskSuccess(todolistId, task));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const changeTask = (todolistId: string, task: TaskType, obj: UpdatedTaskParamType): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        await todoApi.updateTask(todolistId, task.id, {...task, ...obj});\r\n        dispatch(todoActions.changeTaskSuccess(todolistId, task.id, {...task, ...obj}));\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\nexport const deleteTask = (todolistId: string, taskId: string): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    dispatch(todoActions.isFetchingSuccess(true));\r\n    try {\r\n        await todoApi.deleteTask(todolistId, taskId);\r\n        dispatch(todoActions.deleteTaskSuccess(todolistId, taskId))\r\n    } catch (e) {\r\n        dispatch(todoActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n    dispatch(todoActions.isFetchingSuccess(false));\r\n};\r\n\r\n//Types\r\ntype InitialStateType = typeof initialState;\r\nexport type TodoActionTypes = InferActionTypes<typeof todoActions>\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, TodoActionTypes>\r\nexport type ThunkDispatchType = ThunkDispatch<AppStateType, unknown, TodoActionTypes>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {instance} from \"./instance\";\r\nimport {CommonResponseType, SignInDataType} from \"../types/entities\";\r\n\r\nexport const authApi = {\r\n    signIn: (signInData: SignInDataType) => {\r\n        return instance.post<CommonResponseType<{ userId: number }>>('auth/login', {...signInData})\r\n            .then(res => res.data)\r\n    },\r\n    logOut: () => {\r\n        return instance.delete<CommonResponseType<{}>>('auth/login')\r\n            .then(res => res.data)\r\n    },\r\n    authMe: () => {\r\n        return instance.get<CommonResponseType<AuthMeDataType>>('auth/me')\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\n//Types\r\ntype AuthMeDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n","import {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {setTodoLists} from \"./todolistsReducer\";\r\n\r\nconst initialState = {\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    userId: null as number | null,\r\n    isAuth: false,\r\n    initializedApp: false,\r\n    errorMessages: [] as Array<string>\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SET_AUTH_DATA_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n\r\n        case 'INITIAL_APP_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initializedApp: true\r\n            }\r\n        }\r\n\r\n        case 'IS_ERROR_MESSAGE_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                errorMessages: state.errorMessages.includes(action.errorMessage) ?\r\n                    [...state.errorMessages] : [...state.errorMessages, action.errorMessage]\r\n            }\r\n        }\r\n\r\n        case 'FILTER_ERROR_MESSAGE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorMessages: state.errorMessages.filter(message => message !== action.errorMessage)\r\n            };\r\n\r\n        case 'DELETE_ERROR_MESSAGES_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorMessages: []\r\n            };\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const authActions = {\r\n    setAuthDataSuccess: (isAuth: boolean, userId: number | null, email: string | null, login: string | null) => ({\r\n        type: 'SET_AUTH_DATA_SUCCESS',\r\n        payload: {isAuth, userId, email, login}\r\n    } as const),\r\n    initialAppSuccess: () => ({type: 'INITIAL_APP_SUCCESS'} as const),\r\n    isErrorMessageSuccess: (errorMessage: string) => ({type: 'IS_ERROR_MESSAGE_SUCCESS', errorMessage} as const),\r\n    filterErrorMessagesSuccess: (errorMessage: string) => ({type: 'FILTER_ERROR_MESSAGE_SUCCESS', errorMessage} as const),\r\n    deleteErrorMessagesSuccess: () => ({type: 'DELETE_ERROR_MESSAGES_SUCCESS'} as const)\r\n}\r\n\r\n//Thunks\r\nexport const signInThunk = (email: string, password: string, rememberMe: boolean, captcha: boolean): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    try {\r\n        const data = await authApi.signIn({email, password, rememberMe, captcha});\r\n        if (data.resultCode === 0) {\r\n            dispatch(setAuthDataThunk());\r\n            dispatch(setTodoLists());\r\n        } else {\r\n            data.messages.map(err => dispatch(authActions.isErrorMessageSuccess(err)))\r\n        }\r\n    } catch (e) {\r\n        dispatch(authActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n}\r\n\r\nexport const logOutThunk = (): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n\r\n    const todolistsId = getState().todolistsReducer.todolists.map(todo=>todo.id);\r\n    console.log(todolistsId)\r\n\r\n    try {\r\n        const data = await authApi.logOut();\r\n        if (data.resultCode === 0) {\r\n            dispatch(authActions.setAuthDataSuccess(false, null, null, null));\r\n        } else {\r\n            data.messages.map(err => dispatch(authActions.isErrorMessageSuccess(err)))\r\n        }\r\n    } catch (e) {\r\n        dispatch(authActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n}\r\n\r\nexport const setAuthDataThunk = (): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    try {\r\n        const data = await authApi.authMe();\r\n        const {id: userId, email, login} = data.data;\r\n        if (data.resultCode === 0) {\r\n            dispatch(authActions.setAuthDataSuccess(true, userId, email, login));\r\n        } else {\r\n            data.messages.map(err => dispatch(authActions.isErrorMessageSuccess(err)))\r\n        }\r\n    } catch (e) {\r\n        dispatch(authActions.isErrorMessageSuccess(e.response.data.message));\r\n    }\r\n}\r\n\r\nexport const initialAppThunk = (): ThunkType => async (\r\n    dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n\r\n    const promise = dispatch(setAuthDataThunk());\r\n\r\n    // @ts-ignore\r\n    promise.then(() => {\r\n        dispatch(authActions.initialAppSuccess());\r\n    });\r\n\r\n}\r\n\r\n//Types\r\ntype InitialStateType = typeof initialState;\r\nexport type TodoActionTypes = InferActionTypes<typeof authActions>\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, TodoActionTypes>\r\nexport type ThunkDispatchType = ThunkDispatch<AppStateType, unknown, TodoActionTypes>\r\n\r\n\r\n","import React, {memo, useCallback, useEffect} from 'react'\r\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {todoActions} from \"../../redux/todolistsReducer\";\r\nimport classes from \"./ErrorMessages.module.scss\";\r\nimport {authActions} from \"../../redux/authReducer\";\r\n\r\nexport const ErrorMessages = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const todoErrorMessages = useSelector((state: AppStateType) => state.todolistsReducer.errorMessages);\r\n    const {errorMessages: authErrorMessages, initializedApp} = useSelector((state: AppStateType) => state.authReducer);\r\n\r\n    let commonErrors = [...todoErrorMessages, ...authErrorMessages];\r\n    commonErrors = commonErrors.filter((err, index) => commonErrors.indexOf(err) === index);\r\n\r\n    const onCloseAlertHandle = useCallback((errorMessage: string) => {\r\n        dispatch(todoActions.filterErrorMessagesSuccess(errorMessage));\r\n        dispatch(authActions.filterErrorMessagesSuccess(errorMessage));\r\n    }, [dispatch, commonErrors]);\r\n\r\n    useEffect(() => {\r\n        dispatch(todoActions.deleteErrorMessagesSuccess());\r\n        dispatch(authActions.deleteErrorMessagesSuccess());\r\n    }, [initializedApp]);\r\n\r\n    return (\r\n        <div className={classes.alertWrapper}>\r\n            {commonErrors.map((errorMessage, index) => {\r\n                return (\r\n                    <Alert key={index} severity=\"warning\"\r\n                           onClose={() => onCloseAlertHandle(errorMessage)}\r\n                           closeText={'x'}\r\n                           className={classes.Alert}>\r\n                        <AlertTitle>Warning</AlertTitle>\r\n                        <strong>{errorMessage}</strong>\r\n                    </Alert>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n","import React, {memo} from 'react'\r\nimport {AppBar, Button, Toolbar} from '@material-ui/core';\r\nimport classes from \"./HeaderAuth.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {logOutThunk} from \"../../redux/authReducer\";\r\nimport {todoActions} from \"../../redux/todolistsReducer\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const HeaderAuth = memo(() => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.authReducer.isAuth);\r\n    const login = useSelector((state: AppStateType) => state.authReducer.login);\r\n    const todolists = useSelector((state: AppStateType) => state.todolistsReducer.todolists);\r\n    const todolistsId = todolists.map(todo => todo.id);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const LogOutOnClick = () => {\r\n        dispatch(todoActions.isFetchingSuccess(true));\r\n        dispatch(logOutThunk());\r\n        todolistsId.map(id => dispatch(todoActions.deleteTodolistSuccess(id)));\r\n        dispatch(todoActions.isFetchingSuccess(false));\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar className={classes.authToolbar}>\r\n                {login ? <div>{login}</div> : <div>Who are you?</div>}\r\n                {!isAuth ?\r\n                    <Button color=\"inherit\" className={classes.authButton} onClick={()=><Redirect to='/sign-in'/>}>Login</Button> :\r\n                    <Button color=\"inherit\" className={classes.authButton} onClick={LogOutOnClick}>Logout</Button>}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n});\r\n\r\n\r\n","import * as yup from \"yup\";\r\n\r\nexport const schemaSignInForm = yup.object().shape({\r\n    email: yup.string().required().min(2, 'require more or equal 2' ),\r\n    password: yup.string().required().min(4, 'require more or equal 4' )\r\n});","import React, {memo} from 'react'\r\nimport {Input} from \"@material-ui/core\";\r\nimport classes from './authInput.module.scss'\r\n\r\nexport const authInput = memo((props: any) => {\r\n\r\n    return (\r\n        <div className={classes.InputWrapper}>\r\n            <div className={classes.Icon}>\r\n                {props.icon}\r\n            </div>\r\n            <div>\r\n                <Input required {...props}/>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React, {memo} from 'react'\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers';\r\nimport {schemaSignInForm} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authInput} from './authInput/authInput';\r\nimport {Button} from '@material-ui/core';\r\nimport {AccountCircle, Lock} from \"@material-ui/icons\";\r\nimport classes from './SignIn.module.scss';\r\nimport {signInThunk} from \"../../redux/authReducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\nexport const SignIn = memo(() => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.authReducer.isAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const {handleSubmit, errors, control, reset} = useForm<FormInputsType>({\r\n        resolver: yupResolver(schemaSignInForm)\r\n    });\r\n\r\n    const onSubmit = (data: FormInputsType) => {\r\n        const rememberMe = true;\r\n        const captcha = true;\r\n        dispatch(signInThunk(data.email, data.password, rememberMe, captcha));\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/todolists`}/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={classes.Form}>\r\n\r\n            <div className={classes.ControllerWrapper}>\r\n                <Controller\r\n                    as={authInput}\r\n                    defaultValue=\"\"\r\n                    name=\"email\"\r\n                    control={control}\r\n                    placeholder=\"Enter your email\"\r\n                    icon={<AccountCircle/>}\r\n                    error={errors.email?.message}\r\n                />\r\n                {errors.email && <p className={classes.ErrorMessage}>{errors.email.message}</p>}\r\n            </div>\r\n\r\n            <div className={classes.ControllerWrapper}>\r\n                <Controller\r\n                    as={authInput}\r\n                    defaultValue=\"\"\r\n                    name=\"password\"\r\n                    type='password'\r\n                    control={control}\r\n                    placeholder=\"Enter your password\"\r\n                    icon={<Lock/>}\r\n                    error={errors.password?.message}\r\n                />\r\n                {errors.password && <p className={classes.ErrorMessage}>{errors.password.message}</p>}\r\n            </div>\r\n\r\n            <Button type={'submit'} onClick={() => reset()} className={classes.Button}>Sign In</Button>\r\n        </form>\r\n    );\r\n});\r\n\r\n//Types\r\ntype FormInputsType = {\r\n    email: string,\r\n    password: string,\r\n}","import React, {Component} from 'react';\r\nimport {Button, TextField} from '@material-ui/core';\r\nimport classes from './AddNewItemForm.module.scss'\r\n\r\nexport class AddNewItemForm extends Component<OwnPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        error: false,\r\n        title: '',\r\n        focus: false\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newTitle = this.state.title.trim();\r\n\r\n        if (newTitle.length === 0) {\r\n            this.setState({\r\n                error: true,\r\n                focus: true\r\n            })\r\n        } else {\r\n            this.setState({title: ''});\r\n            this.props.addItem(newTitle);\r\n        }\r\n    };\r\n\r\n    onTitleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick()\r\n        }\r\n    };\r\n\r\n    onMouseUpHandler = () => {\r\n        this.setState({\r\n            error: false,\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.todoListNewItemForm}>\r\n                <TextField onChange={this.onTitleChange}\r\n                           onKeyPress={this.onKeyPress}\r\n                           value={this.state.title}\r\n                           label={this.props.placeholder}\r\n                           error={this.state.error}\r\n                           onMouseUp={this.onMouseUpHandler}\r\n                           autoFocus={this.state.focus}\r\n                           helperText={this.state.error && 'Title is required!'}\r\n                />\r\n                <Button variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.onAddItemClick}\r\n                        className={classes.onAddItemButton}>+</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n//Types\r\n\r\ntype StateType = {\r\n    error: boolean;\r\n    title: string;\r\n    focus: boolean;\r\n}\r\n\r\ntype OwnPropsType = {\r\n    addItem: (title: string) => void;\r\n    placeholder: string;\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './DeleteItem.module.scss'\r\nimport {Button} from '@material-ui/core';\r\nimport {Delete, Backspace} from '@material-ui/icons';\r\n\r\ntype OwnPropsType = {\r\n    deleteItem: () => void;\r\n    buttonStyle?: string;\r\n}\r\n\r\nclass DeleteItem extends React.Component<OwnPropsType> {\r\n    render() {\r\n\r\n        if (this.props.buttonStyle === 'taskDeleteButton') {\r\n            return (\r\n                <div className={`${classes.DeleteItemWrapper} ${classes.DeleteItemWrapperBackspace}`}>\r\n                    <Button className={classes.DeleteItem}\r\n                            onClick={this.props.deleteItem}>\r\n                        <Backspace className={classes.Backspace}/>\r\n                    </Button>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={classes.DeleteItemWrapper}>\r\n                <Button className={classes.DeleteItem}\r\n                        onClick={this.props.deleteItem}\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                    <Delete className={classes.Delete}/>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteItem;","import React from 'react';\r\nimport DeleteItem from \"../../../DeleteItem/DeleteItem\";\r\nimport classes from './TodoListTask.module.scss';\r\nimport {TextField, Checkbox} from \"@material-ui/core\";\r\nimport {TaskType, UpdatedTaskParamType} from \"../../../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    key: string;\r\n    todolistId: string;\r\n    task: TaskType;\r\n    deleteTask: (todolistId: string, taskId: string) => void;\r\n    changeTask: (todolistId: string, task: TaskType, obj: UpdatedTaskParamType) => void;\r\n}\r\n\r\ntype StateType = {\r\n    isEditMode: boolean;\r\n    title: string;\r\n    oldTitle: string;\r\n    isTitleEmpty: boolean;\r\n}\r\n\r\nexport class TodoListTask extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state = {\r\n        isEditMode: false,\r\n        title: this.props.task.title,\r\n        oldTitle: '',\r\n        isTitleEmpty: false\r\n    };\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.todolistId, this.props.task.id)\r\n    };\r\n\r\n    updateTask = (obj: UpdatedTaskParamType) => {\r\n        this.props.changeTask(this.props.todolistId, this.props.task, obj)\r\n    };\r\n\r\n    activatedEditMode = () => {\r\n        this.setState({\r\n            isEditMode: true,\r\n            oldTitle: this.state.title\r\n        })\r\n    };\r\n\r\n    deActivatedEditMode = () => {\r\n        this.setState({isEditMode: false});\r\n        this.state.isTitleEmpty ?\r\n            this.setState({title: this.state.oldTitle}) :\r\n            this.updateTask({title: this.state.title});\r\n        this.setState({isTitleEmpty: false});\r\n    };\r\n\r\n    setChangeByEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.deActivatedEditMode();\r\n        }\r\n    };\r\n\r\n    onIsDoneChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.updateTask({status: status});\r\n    };\r\n\r\n    onTitleChanged = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let title = e.currentTarget.value;\r\n        title.length === 0 ?\r\n            this.setState({isTitleEmpty: true, title: title}) :\r\n            this.setState({isTitleEmpty: false, title: title})\r\n    };\r\n\r\n    render() {\r\n        let status = this.props.task.status !== 0;\r\n        let taskIsDoneClass = status ? 'todoList-task done' : 'todoList-task';\r\n        return (\r\n            <div className={classes.Task}>\r\n                <div className={taskIsDoneClass}>\r\n                    <Checkbox checked={status}\r\n                              onChange={this.onIsDoneChanged}\r\n                              color={'primary'}\r\n                    />\r\n\r\n                    {this.state.isEditMode\r\n                        ?\r\n                        <TextField value={this.state.title}\r\n                                   onKeyPress={this.setChangeByEnter}\r\n                                   autoFocus={true}\r\n                                   onBlur={this.deActivatedEditMode}\r\n                                   onChange={this.onTitleChanged}\r\n                                   helperText={this.state.isTitleEmpty && 'Title is required!'}\r\n                                   error={this.state.isTitleEmpty}\r\n                        />\r\n                        :\r\n                        <span onClick={this.activatedEditMode}>\r\n                            {this.props.task.title}\r\n                        </span>\r\n                    }\r\n                </div>\r\n                <DeleteItem\r\n                    deleteItem={this.deleteTask}\r\n                    buttonStyle={'taskDeleteButton'}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {TodoListTask} from \"./TodoListTask/TodoListTask\"\r\nimport classes from './TodoListTasks.module.scss'\r\nimport {TaskType, UpdatedTaskParamType} from \"../../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    tasks: Array<TaskType>;\r\n    todolistId: string;\r\n    deleteTask: (todolistId: string, taskId: string) => void;\r\n    changeTask: (todolistId: string, task: TaskType, obj: UpdatedTaskParamType) => void;\r\n}\r\n\r\nexport const TodoListTasks = (props: OwnPropsType) => (\r\n\r\n    <div className={classes.TodoListTasks}>\r\n        {props.tasks.map(task => (\r\n            <TodoListTask key={task.id}\r\n                          todolistId={props.todolistId}\r\n                          task={task}\r\n                          deleteTask={props.deleteTask}\r\n                          changeTask={props.changeTask}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport classes from './TodoListFooter.module.scss'\r\nimport {Button, Fade} from \"@material-ui/core\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\ntype OwnPropsType = {\r\n    filterValue: string;\r\n    changeFilter: (newFilterValue: string) => void;\r\n}\r\ntype StateType = {\r\n    isHidden: boolean;\r\n}\r\n\r\nclass TodoListFooter extends Component<OwnPropsType, StateType> {\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All');\r\n    };\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed');\r\n    };\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active');\r\n    };\r\n    onShowFiltersClick = () => {\r\n        this.setState({isHidden: true});\r\n    };\r\n    onHideFiltersClick = () => {\r\n        this.setState({isHidden: false});\r\n    };\r\n\r\n    render() {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n        const hiddenValue = this.state.isHidden;\r\n\r\n        return (\r\n            <div className={classes.TodoListFooter}>\r\n                {!hiddenValue &&\r\n                <Fade in={!hiddenValue} timeout={700}>\r\n                    <div className={classes.filters}>\r\n                        <Button className={classForAll}\r\n                                onClick={this.onAllFilterClick}\r\n                        >All </Button>\r\n                        <Button className={classForCompleted}\r\n                                onClick={this.onCompletedFilterClick}\r\n                                color={'primary'}\r\n                        >Completed\r\n                        </Button>\r\n                        <Button className={classForActive}\r\n                                onClick={this.onActiveFilterClick}\r\n                                color={'secondary'}\r\n                        >Active\r\n                        </Button>\r\n                    </div>\r\n                </Fade>\r\n                }\r\n\r\n                {!this.state.isHidden && <Button onClick={this.onShowFiltersClick}\r\n                                                 className={classes.isHidden}\r\n                                                 title={'Скрыть панель фильтров'}> <VisibilityOff/> </Button>}\r\n                {this.state.isHidden && <Button onClick={this.onHideFiltersClick}\r\n                                                className={classes.isHidden}\r\n                                                title={'Показать панель фильтров'}> <Visibility/> </Button>}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default TodoListFooter;\r\n","import React, {Component} from 'react';\r\nimport classes from './TodoListTitle.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {UpdatedTodoTitleType} from \"../../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    title: string;\r\n    changeTodolistTitle:(todolistId: string, objTitle: UpdatedTodoTitleType)=>void;\r\n    todolistId: string;\r\n}\r\n\r\ntype StateType = {\r\n    title: string;\r\n    isEditMode: boolean;\r\n    oldTitle: string;\r\n    isTitleEmpty: boolean;\r\n}\r\n\r\nclass TodoListTitle extends Component<OwnPropsType, StateType> {\r\n\r\n    state = {\r\n        title: this.props.title,\r\n        isEditMode: false,\r\n        oldTitle: '',\r\n        isTitleEmpty: false\r\n    };\r\n\r\n    updateTodolistTitle = (objTitle: UpdatedTodoTitleType) => {\r\n        this.props.changeTodolistTitle(this.props.todolistId, objTitle)\r\n    };\r\n\r\n    activatedEditMode = () => {\r\n        this.setState({\r\n            isEditMode: true,\r\n            oldTitle: this.state.title\r\n        })\r\n    };\r\n\r\n    deActivatedEditMode = () => {\r\n        this.setState({isEditMode: false});\r\n        this.state.isTitleEmpty ?\r\n            this.setState({title: this.state.oldTitle}) :\r\n            this.updateTodolistTitle({title: this.state.title});\r\n        this.setState({isTitleEmpty: false});\r\n    };\r\n\r\n    setChangeByEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.deActivatedEditMode();\r\n        }\r\n    };\r\n\r\n    onTitleChanged = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let title = e.currentTarget.value;\r\n        title.length === 0 ?\r\n            this.setState({isTitleEmpty: true, title: title}) :\r\n            this.setState({isTitleEmpty: false, title: title})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.isEditMode\r\n                    ?\r\n                    <TextField value={this.state.title}\r\n                               onKeyPress={this.setChangeByEnter}\r\n                               autoFocus={true}\r\n                               onBlur={this.deActivatedEditMode}\r\n                               onChange={this.onTitleChanged}\r\n                               helperText={this.state.isTitleEmpty && 'Title is required!'}\r\n                               error={this.state.isTitleEmpty}\r\n                    />\r\n                    :\r\n                    <span className={classes.title}\r\n                          onClick={this.activatedEditMode}\r\n                    >{this.props.title}</span>\r\n                }\r\n            </>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import React, {Component} from 'react';\r\nimport classes from './TodoList.module.scss'\r\nimport {TodoListTasks} from \"./TodoListTasks/TodoListTasks\"\r\nimport TodoListFooter from \"./TodoListFooter/TodoListFooter\"\r\nimport TodoListTitle from \"./TodoListTitle/TodoListTitle\";\r\nimport {AddNewItemForm} from \"../AddNewItemForm/AddNewItemForm\";\r\nimport {\r\n    addTask,\r\n    changeTask,\r\n    changeTodolistTitle,\r\n    deleteTask,\r\n    setTasks,\r\n} from '../../redux/todolistsReducer'\r\nimport {connect} from \"react-redux\";\r\nimport DeleteItem from \"../DeleteItem/DeleteItem\";\r\nimport {TaskType, UpdatedTaskParamType, UpdatedTodoTitleType} from \"../../types/entities\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\nclass TodoList extends Component<CommonPropsType, StateType> {\r\n\r\n    state = {\r\n        filterValue: \"All\",\r\n    };\r\n\r\n    addTask = (title: string) => {\r\n        this.props.addTask(title, this.props.id);\r\n    };\r\n\r\n    deleteTodoList = () => {\r\n        this.props.deleteListItem(this.props.id);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({filterValue: newFilterValue})\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.setTasks(this.props.id);\r\n    };\r\n\r\n    render() {\r\n        let {tasks = []} = this.props;\r\n\r\n        let filteredTasks = tasks.filter(task => {\r\n\r\n            switch (this.state.filterValue) {\r\n                case 'Active':\r\n                    return !task.status;\r\n                case 'Completed':\r\n                    return task.status;\r\n                default:\r\n                    return true;\r\n            }\r\n\r\n        });\r\n\r\n        return (\r\n            <div className={classes.TodoList}>\r\n                <div className={classes.todoListHeader}>\r\n                    <div className={classes.TodoListTitleWrapper}>\r\n                        <TodoListTitle title={this.props.title}\r\n                                       changeTodolistTitle={this.props.changeTodolistTitle}\r\n                                       todolistId={this.props.id}\r\n                        />\r\n                        <DeleteItem deleteItem={this.deleteTodoList}/>\r\n                    </div>\r\n                    <AddNewItemForm addItem={this.addTask}\r\n                                    placeholder={\"New task name\"}\r\n                    />\r\n                </div>\r\n                <TodoListTasks tasks={filteredTasks}\r\n                               todolistId={this.props.id}\r\n                               deleteTask={this.props.deleteTask}\r\n                               changeTask={this.props.changeTask}\r\n                />\r\n                <TodoListFooter filterValue={this.state.filterValue}\r\n                                changeFilter={this.changeFilter}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect<{}, MapDispatchToPropsType, OwnPropsType, AppStateType>(null, {\r\n    setTasks,\r\n    addTask,\r\n    deleteTask,\r\n    changeTask,\r\n    changeTodolistTitle\r\n})(TodoList);\r\n\r\n\r\n//Types\r\ntype OwnPropsType = {\r\n    key: string;\r\n    id: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    deleteListItem: (todolistId: string) => void;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setTasks: (todolistId: string) => void;\r\n    addTask: (title: string, todolistId: string) => void;\r\n    deleteTask: (todolistId: string, taskId: string) => void;\r\n    changeTask: (todolistId: string, task: TaskType, obj: UpdatedTaskParamType) => void;\r\n    changeTodolistTitle: (todolistId: string, objTitle: UpdatedTodoTitleType) => void;\r\n}\r\n\r\ntype StateType = {\r\n    filterValue: string;\r\n}\r\n\r\ntype CommonPropsType = OwnPropsType & MapDispatchToPropsType & {};\r\n","import React, {Component} from \"react\";\r\nimport {AddNewItemForm} from \"../AddNewItemForm/AddNewItemForm\";\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodolist, deleteTodolist, setTodoLists} from \"../../redux/todolistsReducer\";\r\nimport {TodoListType} from \"../../types/entities\";\r\nimport classes from './TodolIstContainer.module.scss'\r\n\r\nclass TodolistContainer extends Component<CommonPropsType> {\r\n\r\n    addListItem = (title: string) => {\r\n        this.props.addTodolist(title);\r\n    };\r\n\r\n    deleteListItem = (todolistId: string) => {\r\n        this.props.deleteTodolist(todolistId);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.setTodoLists();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={classes.addListItemWrapper}>\r\n                    <div className={classes.addListItem}>\r\n                        <AddNewItemForm\r\n                            addItem={this.addListItem}\r\n                            placeholder={\"New TodoList name\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.todoLists}>\r\n                    {this.props.todolists.map(item => (\r\n                        <TodoList\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            title={item.title}\r\n                            tasks={item.tasks}\r\n                            deleteListItem={this.deleteListItem}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    todolists: state.todolistsReducer.todolists,\r\n    isFetching: state.todolistsReducer.isFetching,\r\n    errorMessages: state.todolistsReducer.errorMessages\r\n});\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    setTodoLists,\r\n    addTodolist,\r\n    deleteTodolist\r\n})(TodolistContainer);\r\n\r\n//Types\r\ntype MapDispatchToPropsType = {\r\n    setTodoLists: () => void;\r\n    addTodolist: (title: string) => void;\r\n    deleteTodolist: (todolistId: string) => void;\r\n}\r\ntype MapStateToPropsType = {\r\n    todolists: Array<TodoListType>,\r\n    isFetching: boolean,\r\n}\r\ntype CommonPropsType = MapDispatchToPropsType & MapStateToPropsType;","import React, {FC, memo} from 'react'\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ntype Props = {\r\n    Component: FC | any,\r\n    exact?: boolean,\r\n    path: string\r\n}\r\n\r\nexport const AuthenticationRoute: FC<Props> = memo(({Component, exact = false, path, ...rest}) => {\r\n    const isAuth = useSelector((state: AppStateType) => state.authReducer.isAuth);\r\n    return (\r\n        <Route\r\n            exact={exact}\r\n            path={path}\r\n            render={() => isAuth ? <Component {...rest}/> : <Redirect to='/sign-in'/>}\r\n        />\r\n    );\r\n});","import React, {memo, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Preloader} from \"./components/Preloader/Preloader\";\r\nimport {ErrorMessages} from \"./components/ErrorMessages/ErrorMessages\";\r\nimport {HeaderAuth} from './components/HeaderAuth/HeaderAuth';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport {SignIn} from './components/SignIn/SignIn';\r\nimport TodolistContainer from \"./components/TodoListContainer/TodolIstContainer\";\r\nimport {AuthenticationRoute} from \"./hoc/AuthenticationRoute/AuthenticationRoute\";\r\nimport {initialAppThunk} from \"./redux/authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\n\r\nexport const App = memo(() => {\r\n\r\n    const {isFetching} = useSelector((state: AppStateType) => state.todolistsReducer);\r\n    const {initializedApp} = useSelector((state: AppStateType) => state.authReducer);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(initialAppThunk());\r\n    }, [])\r\n\r\n    return <div className={'App'}>\r\n        {(isFetching || !initializedApp) ? <Preloader/> : null}\r\n        <ErrorMessages/>\r\n        <HeaderAuth/>\r\n        <Switch>\r\n            <Route path='/sign-in' exact component={SignIn}/>\r\n            <AuthenticationRoute path='/todolists' exact={true} Component={TodolistContainer}/>\r\n            <Route path='*' render={() => <Redirect to='/todolists'/>}/>\r\n        </Switch>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. TodoList is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\nimport {todolistsReducer} from \"./todolistsReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolistsReducer,\r\n    authReducer\r\n});\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, thunk)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n      <Provider store={store}>\r\n          <HashRouter>\r\n              <App />\r\n          </HashRouter>\r\n      </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DeleteItemWrapper\":\"DeleteItem_DeleteItemWrapper__1byyD\",\"DeleteItem\":\"DeleteItem_DeleteItem__ohqDe\",\"DeleteItemWrapperBackspace\":\"DeleteItem_DeleteItemWrapperBackspace__2Dkur\",\"Backspace\":\"DeleteItem_Backspace__rfygg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"SignIn_Form__265QB\",\"ControllerWrapper\":\"SignIn_ControllerWrapper__g_mH0\",\"ErrorMessage\":\"SignIn_ErrorMessage__2gp3y\",\"Button\":\"SignIn_Button__RVHKl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoListFooter\":\"TodoListFooter_TodoListFooter__1LYtr\",\"filters\":\"TodoListFooter_filters__2aGjd\",\"isHidden\":\"TodoListFooter_isHidden__3luVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authToolbar\":\"HeaderAuth_authToolbar__3AYJn\",\"authButton\":\"HeaderAuth_authButton__3Jdad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__1YR96\",\"todoListHeader\":\"TodoList_todoListHeader__1cdDL\",\"TodoListTitleWrapper\":\"TodoList_TodoListTitleWrapper__1sUTb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoLists\":\"TodolIstContainer_todoLists__1w34L\",\"addListItemWrapper\":\"TodolIstContainer_addListItemWrapper__2Fb5M\",\"addListItem\":\"TodolIstContainer_addListItem__1Evet\",\"TodoList\":\"TodolIstContainer_TodoList__2HqvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertWrapper\":\"ErrorMessages_alertWrapper__32hVA\",\"Alert\":\"ErrorMessages_Alert__2TnkJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputWrapper\":\"authInput_InputWrapper__D0sTo\",\"Icon\":\"authInput_Icon__1GFkd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListNewItemForm\":\"AddNewItemForm_todoListNewItemForm__i8FeF\",\"onAddItemButton\":\"AddNewItemForm_onAddItemButton__3OQjQ\"};"],"sourceRoot":""}